Switch case:
Note :
cases have to be same type as expressions, must be a constant or literal.(we can’t compare boolean ).
Duplicate cases are not allowed.
break is used to terminate the sequence.
If break is not used, it will continue to next case.
default will execute when none of the above does.
If default is not at the end, put break after it.

Eg:
switch(expression){
    case :
        Statement:
        break;
    default:
        Statement:
}

1)program using switch case.
Code:
import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int a=sc.nextInt();
		switch(a){
		    case 1:
		        System.out.println("Monday");
		        break;
		    case 2:
		        System.out.println("Tuesday");
		        break;
            case 3:
		        System.out.println("Wednesday");
		        break;
		   case 4:
		        System.out.println("Thursday");
		        break;
		   case 5:
		        System.out.println("Friday");
		        break;
		   case 6:
		        System.out.println("Saturday");
		        break;
		   case 7:
		        System.out.println("Sunday");
		        break;
		   default:
		        System.out.println("range is from 1 to 7 only");
		}
		
	}
}


Enhanced switch case :
import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int a=sc.nextInt();
		switch(a){
		    case 1-> System.out.println("Monday");
		    case 2->System.out.println("Tuesday");
            	    case 3->System.out.println("Wednesday");
		    case 4->System.out.println("Thursday");
		    case 5->System.out.println("Friday");
		    case 6->System.out.println("Saturday");
		    case 7->System.out.println("Sunday");
		    default->System.out.println("range is from 1 to 7 only");
		}
		
	}
}

Here, we don't use break keyword, ";" acts as break statement.



Enhanced if-else or ternary operator:

(Condition)? Statement1:statement2;
Normal if-else:

int n=5;
if(n==5){
    System.out.println("Yes");
}else{
    System.out.println(“No");

Using ternary operator:

(n==5) ? System.out.println("Yes") : System.out.println(“No");
                        (or)
String res = (n==5)?("Yes"):("No");
System.out.println("res");

Enhanced “for” or “for-each” loop:

In collections we don’t have index values, in those situations we have to use for-each loop.
Eg:

int[] arr={1,2,3,4,5};
for(var:arr){
    System.out.println(var);
}
